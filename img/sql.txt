 Kategorie pojęć składniowych w języku SQL

SQL (Structured Query Language) to język zapytań używany do komunikacji z bazą danych. Podstawowe pojęcia składniowe SQL można podzielić na kilka głównych kategorii:

1. DQL (Data Query Language):
   - SELECT: Używana do pobierania danych z bazy.

2. DDL (Data Definition Language):
   - CREATE: Tworzenie nowych tabel, widoków, indeksów itp.
   - ALTER: Modyfikowanie istniejących struktur bazy danych.
   - DROP: Usuwanie tabel, widoków, indeksów itp.
   - TRUNCATE: Usuwanie wszystkich wierszy z tabeli, ale zachowanie struktury tabeli.

3. DML (Data Manipulation Language):
   - INSERT: Wstawianie nowych danych do tabeli.
   - UPDATE: Aktualizowanie istniejących danych.
   - DELETE: Usuwanie danych z tabeli.

4. DCL (Data Control Language):
   - GRANT: Nadawanie uprawnień użytkownikom.
   - REVOKE: Odbieranie uprawnień użytkownikom.

5. TCL (Transaction Control Language):
   - COMMIT: Zatwierdzanie transakcji.
   - ROLLBACK: Wycofywanie transakcji.
   - SAVEPOINT: Tworzenie punktów przywracania wewnątrz transakcji.

 Klauzula w SQL

Klauzula to fragment instrukcji SQL, który specyfikuje dodatkowe warunki lub parametry dla danego zapytania. Przykłady klauzul:

- WHERE: Filtruje wyniki zapytania według określonych warunków.
- GROUP BY: Grupuje wyniki zapytania na podstawie jednej lub więcej kolumn.
- HAVING: Filtruje grupy utworzone przez klauzulę GROUP BY.
- ORDER BY: Sortuje wyniki zapytania według jednej lub więcej kolumn.
- JOIN: Łączy wiersze z dwóch lub więcej tabel na podstawie relacji między nimi.
- LIMIT: Ogranicza liczbę wierszy zwróconych przez zapytanie.

 Operatory stosowane w SQL

Operatory w SQL są używane do wykonywania operacji na danych. Główne typy operatorów to:

1. Operatory arytmetyczne:
   - + (dodawanie)
   - - (odejmowanie)
   - * (mnożenie)
   - / (dzielenie)
   - % (modulo)

2. Operatory porównania:
   - = (równe)
   - != lub <> (nie równe)
   - > (większe niż)
   - < (mniejsze niż)
   - >= (większe lub równe)
   - <= (mniejsze lub równe)

3. Operatory logiczne:
   - AND (logiczne i)
   - OR (logiczne lub)
   - NOT (logiczne nie)

4. Operatory specjalne:
   - BETWEEN: Sprawdza, czy wartość mieści się w określonym zakresie.
   - LIKE: Używany do porównywania wzorców.
   - IN: Sprawdza, czy wartość znajduje się w określonym zbiorze wartości.
   - IS NULL: Sprawdza, czy wartość jest równa NULL.
   - EXISTS: Sprawdza, czy podzapytanie zwraca jakiekolwiek wiersze.

 Zasady tworzenia identyfikatorów

Identyfikatory w SQL to nazwy nadawane obiektom bazy danych, takim jak tabele, kolumny, indeksy, widoki itp. Zasady tworzenia identyfikatorów obejmują:

1. Długość: Różne systemy baz danych mają różne limity długości identyfikatorów, ale zazwyczaj są one ograniczone do 128 znaków.
2. Znaki dozwolone: Identyfikatory mogą zawierać litery, cyfry oraz znaki podkreślenia (_). Nie mogą zaczynać się od cyfry.
3. Wielkość liter: SQL jest w większości systemów baz danych niewrażliwy na wielkość liter w identyfikatorach, ale niektóre systemy mogą mieć inne zasady.
4. Słowa kluczowe: Unikanie używania słów kluczowych SQL jako identyfikatorów, chyba że są one ujęte w nawiasy kwadratowe (np. [table]) lub podwójne cudzysłowy (np. "table").

 Typy danych w SQL

Typy danych określają rodzaj danych, jakie można przechowywać w kolumnie tabeli. Podstawowe typy danych to:

1. Typy liczbowe:
   - INTEGER: Liczby całkowite.
   - FLOAT i DOUBLE: Liczby zmiennoprzecinkowe.
   - DECIMAL lub NUMERIC: Liczby dziesiętne o stałej precyzji.

2. Typy znakowe:
   - CHAR(n): Stałej długości ciągi znaków.
   - VARCHAR(n): Zmienna długość ciągów znaków.
   - TEXT: Duże ciągi tekstowe.

3. Typy dat i czasu:
   - DATE: Data.
   - TIME: Czas.
   - DATETIME: Data i czas.
   - TIMESTAMP: Znacznik czasu.

4. Typy binarne:
   - BINARY: Stałej długości dane binarne.
   - VARBINARY: Zmienna długość danych binarnych.
   - BLOB: Duże obiekty binarne.

5. Typy logiczne:
   - BOOLEAN: Przechowuje wartości TRUE i FALSE.

Znajomość tych kategorii, klauzul, operatorów, zasad tworzenia identyfikatorów oraz typów danych jest kluczowa dla efektywnego używania SQL w pracy z bazami danych.



CREATE DATABASE KSIĘGARNIA;

USE KSIĘGARNIA;

CREATE TABLE AUTOR (
    IdAutora INT AUTO_INCREMENT PRIMARY KEY,
    Imię VARCHAR(50) NOT NULL,
    Nazwisko VARCHAR(50) NOT NULL,
    Data_urodzenia DATE
);

CREATE TABLE WYDAWNICTWO (
    IdWydawnictwa INT AUTO_INCREMENT PRIMARY KEY,
    Nazwa VARCHAR(100) NOT NULL,
    Adres VARCHAR(255) NOT NULL
);

CREATE TABLE KSIĄŻKA (
    IdKsiążki INT AUTO_INCREMENT PRIMARY KEY,
    Tytuł VARCHAR(100) NOT NULL,
    IdAutora INT NOT NULL,
    IdWydawnictwa INT NOT NULL,
    Rok_wydania YEAR NOT NULL,
    Cena DECIMAL(8, 2) NOT NULL,
    FOREIGN KEY (IdAutora) REFERENCES AUTOR(IdAutora),
    FOREIGN KEY (IdWydawnictwa) REFERENCES WYDAWNICTWO(IdWydawnictwa)
);



CREATE DATABASE SZKOŁA;

USE SZKOŁA;

-- Utworzenie tabeli UCZEŃ
CREATE TABLE UCZEŃ (
    IdUcznia INT AUTO_INCREMENT PRIMARY KEY,
    Imię VARCHAR(50) NOT NULL,
    Nazwisko VARCHAR(50) NOT NULL,
    Data_urodzenia DATE NOT NULL,
    Miejsce_ur VARCHAR(50) NOT NULL,
    Płeć ENUM('M', 'K') NOT NULL,
    Klasa VARCHAR(10) NOT NULL
);

CREATE TABLE PRZEDMIOT (
    IdPrzedmiotu INT AUTO_INCREMENT PRIMARY KEY,
    Nazwa_przedmiotu VARCHAR(100) NOT NULL
);

CREATE TABLE OCENY (
    IdOceny INT AUTO_INCREMENT PRIMARY KEY,
    IdUcznia INT NOT NULL,
    IdPrzedmiotu INT NOT NULL,
    Ocena DECIMAL(3, 2) NOT NULL,
    Data_oceny DATE NOT NULL,
    FOREIGN KEY (IdUcznia) REFERENCES UCZEŃ(IdUcznia),
    FOREIGN KEY (IdPrzedmiotu) REFERENCES PRZEDMIOT(IdPrzedmiotu)
);
USE SZKOLA;

SELECT Nazwisko
FROM UCZEŃ
WHERE Płeć = 'M' AND Miejsce_ur = 'Łódź';

SELECT U.Imię, U.Nazwisko
FROM UCZEŃ U
JOIN OCENY O ON U.IdUcznia = O.IdUcznia
JOIN PRZEDMIOT P ON O.IdPrzedmiotu = P.IdPrzedmiotu
WHERE P.Nazwa_przedmiotu = 'Geografia' AND O.Ocena IN (4, 5);

SELECT U.Imię, U.Nazwisko
FROM UCZEŃ U
JOIN OCENY O1 ON U.IdUcznia = O1.IdUcznia
JOIN PRZEDMIOT P1 ON O1.IdPrzedmiotu = P1.IdPrzedmiotu
LEFT JOIN OCENY O2 ON U.IdUcznia = O2.IdUcznia AND O2.IdPrzedmiotu = (
    SELECT IdPrzedmiotu FROM PRZEDMIOT WHERE Nazwa_przedmiotu = 'Geografia'
)
WHERE P1.Nazwa_przedmiotu = 'Matematyka' AND O1.Ocena = 4
  AND (O2.Ocena IS NULL OR O2.Ocena < 3);









### Instrukcje służące do łączenia zapytań

W SQL istnieje kilka instrukcji i operatorów, które służą do łączenia wyników różnych zapytań. Oto najważniejsze z nich:

1. UNION:
   - Łączy wyniki dwóch lub więcej zapytań SELECT.
   - Domyślnie eliminuje duplikaty w wynikach.
   - Wszystkie zapytania muszą mieć taką samą liczbę kolumn i zgodne typy danych.

   sql
   SELECT Imię, Nazwisko FROM UCZEŃ WHERE Płeć = 'M'
   UNION
   SELECT Imię, Nazwisko FROM UCZEŃ WHERE Płeć = 'K';
   

2. UNION ALL:
   - Podobne do UNION, ale nie eliminuje duplikatów.
   - Szybsze od UNION, ponieważ nie sprawdza duplikatów.

   sql
   SELECT Imię, Nazwisko FROM UCZEŃ WHERE Płeć = 'M'
   UNION ALL
   SELECT Imię, Nazwisko FROM UCZEŃ WHERE Płeć = 'K';
   

3. INTERSECT:
   - Zwraca wspólne wiersze z dwóch zapytań SELECT.
   - Dostępne w niektórych systemach baz danych, np. w SQL Server, ale nie w MySQL.

   sql
   SELECT Imię, Nazwisko FROM UCZEŃ WHERE Klasa = '1A'
   INTERSECT
   SELECT Imię, Nazwisko FROM UCZEŃ WHERE Miejsce_ur = 'Łódź';
   

4. EXCEPT:
   - Zwraca wiersze z pierwszego zapytania, które nie są w wynikach drugiego zapytania.
   - Również dostępne w niektórych systemach baz danych, ale nie w MySQL.

   sql
   SELECT Imię, Nazwisko FROM UCZEŃ WHERE Klasa = '1A'
   EXCEPT
   SELECT Imię, Nazwisko FROM UCZEŃ WHERE Miejsce_ur = 'Łódź';
   

### Zastosowanie podzapytań

Podzapytania (ang. subqueries) są to zapytania zagnieżdżone w innych zapytaniach. Mogą być używane do różnych celów, takich jak:

1. Filtracja danych:
   - Podzapytania w klauzuli WHERE umożliwiają filtrowanie wierszy na podstawie wyników innych zapytań.

   sql
   SELECT Imię, Nazwisko
   FROM UCZEŃ
   WHERE IdUcznia IN (
       SELECT IdUcznia
       FROM OCENY
       WHERE Ocena = 5
   );
   

2. Tworzenie pochodnych wartości:
   - Podzapytania w klauzuli SELECT mogą służyć do obliczania wartości na podstawie wyników innych zapytań.

   sql
   SELECT Imię, Nazwisko, (
       SELECT MAX(Ocena)
       FROM OCENY
       WHERE UCZEŃ.IdUcznia = OCENY.IdUcznia
   ) AS Najwyższa_ocena
   FROM UCZEŃ;
   

3. Tworzenie pochodnych tabel:
   - Podzapytania w klauzuli FROM mogą tworzyć tymczasowe tabele do dalszej analizy.

   sql
   SELECT AVG(Ocena)
   FROM (
       SELECT Ocena
       FROM OCENY
       WHERE IdPrzedmiotu = 1
   ) AS GeografiaOceny;
   

4. Podzapytania skorelowane:
   - Podzapytania, które odwołują się do kolumn z zewnętrznego zapytania, co pozwala na bardziej złożone operacje.

   sql
   SELECT Imię, Nazwisko
   FROM UCZEŃ U
   WHERE EXISTS (
       SELECT 1
       FROM OCENY O
       WHERE O.IdUcznia = U.IdUcznia AND O.Ocena = 5
   );
   

### Funkcje operatorów wewnętrznych

Operatory wewnętrzne (ang. internal operators) w SQL są używane do wykonywania różnych operacji na danych. Oto najważniejsze typy i ich funkcje:

1. Operatory arytmetyczne:
   - Służą do wykonywania operacji matematycznych.
   - + (dodawanie), - (odejmowanie), * (mnożenie), / (dzielenie), % (modulo).

   sql
   SELECT (Cena * 0.8) AS Cena_po_rabacie
   FROM KSIĄŻKA;
   

2. Operatory porównania:
   - Używane do porównywania wartości.
   - = (równe), != lub <> (nie równe), > (większe niż), < (mniejsze niż), >= (większe lub równe), <= (mniejsze lub równe).

   sql
   SELECT Imię, Nazwisko
   FROM UCZEŃ
   WHERE Ocena >= 4;
   

3. Operatory logiczne:
   - Używane do łączenia wyrażeń logicznych.
   - AND (logiczne i), OR (logiczne lub), NOT (logiczne nie).

   sql
   SELECT Imię, Nazwisko
   FROM UCZEŃ
   WHERE Płeć = 'M' AND Klasa = '1A';
   

4. Operatory specjalne:
   - BETWEEN: Sprawdza, czy wartość mieści się w określonym zakresie.

     sql
     SELECT Imię, Nazwisko
     FROM UCZEŃ
     WHERE Data_urodzenia BETWEEN '2000-01-01' AND '2005-12-31';
     

   - LIKE: Używany do porównywania wzorców.

     sql
     SELECT Imię, Nazwisko
     FROM UCZEŃ
     WHERE Nazwisko LIKE 'Kow%';
     

   - IN: Sprawdza, czy wartość znajduje się w określonym zbiorze wartości.

     sql
     SELECT Imię, Nazwisko
     FROM UCZEŃ
     WHERE Klasa IN ('1A', '1B', '1C');
     

   - IS NULL: Sprawdza, czy wartość jest równa NULL.

     sql
     SELECT Imię, Nazwisko
     FROM UCZEŃ
     WHERE Miejsce_ur IS NULL;
     

   - EXISTS: Sprawdza, czy podzapytanie zwraca jakiekolwiek wiersze.

     sql
     SELECT Imię, Nazwisko
     FROM UCZEŃ U
     WHERE EXISTS (
         SELECT 1
         FROM OCENY O
         WHERE O.IdUcznia = U.IdUcznia AND O.Ocena = 5
     );
     

Zrozumienie tych instrukcji, zastosowania podzapytań oraz funkcji operatorów wewnętrznych jest kluczowe dla skutecznego wykorzystania SQL w analizie i zarządzaniu danymi.





USE SZKOLA;

SELECT Nazwisko
FROM UCZEŃ
WHERE Płeć = 'M' AND Miejsce_ur = 'Łódź';





SELECT U.Imię, U.Nazwisko
FROM UCZEŃ U
JOIN OCENY O ON U.IdUcznia = O.IdUcznia
JOIN PRZEDMIOT P ON O.IdPrzedmiotu = P.IdPrzedmiotu
WHERE P.Nazwa_przedmiotu = 'Geografia' AND O.Ocena IN (4, 5);




SELECT U.Imię, U.Nazwisko
FROM UCZEŃ U
JOIN OCENY O1 ON U.IdUcznia = O1.IdUcznia
JOIN PRZEDMIOT P1 ON O1.IdPrzedmiotu = P1.IdPrzedmiotu
LEFT JOIN OCENY O2 ON U.IdUcznia = O2.IdUcznia AND O2.IdPrzedmiotu = (
    SELECT IdPrzedmiotu FROM PRZEDMIOT WHERE Nazwa_przedmiotu = 'Geografia'
)
WHERE P1.Nazwa_przedmiotu = 'Matematyka' AND O1.Ocena = 4
  AND (O2.Ocena IS NULL OR O2.Ocena < 3);

